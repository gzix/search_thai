<?php
/**
 * @file
 * search_thai.module integrates & improves Thai contents searching
 * for Drupal core search module.
 */

/**
 * Define Thai unicode range classes
 * Thai Unicode range 0E00-0E7F.
 * @see http://unicode.org/charts/PDF/U0E00.pdf
 */

// All Thai characters or simply use \p{Thai}
define('PREG_CLASS_TH', '\x{0E00}-\x{0E7F}');

// Thai front vowel สระหน้า: เอ แอ โอ ใอ ไอ
define('PREG_CLASS_TH_VOWEL_FRONT', '\x{0E40}-\x{0E44}');

// Thai characters which can be used as word back boundary
// สระอะ (0E30), สระอำ (0E33), ไปยาลน้อย (0E2F), ไม้ยมก (0E46), การันต์ (0E4C) และอื่นๆ 
define('PREG_CLASS_TH_WORD_BACK_BOUNDARY', '\x{0E30}\x{0E33}\x{0E2F}\x{0E45}-\x{0E46}\x{0E4C}-\x{0E4F}\x{0E5A}-\x{0E5B}');

// Thai tone-marks & some special characters can be omitted from search index.
define('PREG_CLASS_TH_OMIT', '\x{0E47}-\x{0E4F}');

// Thai characters which can't be the begining of the words (not yet useful for the moment).
define('PREG_CLASS_TH_NOT_FIRST', '\x{0E2F}-\x{0E3A}\x{0E45}-\x{0E4F}\x{0E5A}-\x{0E5B}');

/**
 * Implements hook_form_FORM_ID_alter().
 */
function search_thai_form_search_admin_settings_alter(&$form, &$form_state, $form_id) {
  // Add a checkbox to search admin settings form.
  $form['indexing_settings']['overlap_th'] = array(
    '#type' => 'checkbox',
    '#title' => t('Simple Thai handling'),
    '#default_value' => variable_get('overlap_th', TRUE),
    '#description' => t('Whether to apply a simple Thai tokenizer based on overlapping sequences. Turn this off if you want to use an external preprocessor for this instead. Does not affect other languages.')
  );
}

/**
 * Implements hook_search_preprocess().
 *
 * Note: The better way to correctly split Thai words is to use external dictionaries
 * but that's not the purpose of this simple module (at the moment).
 * @see search_simplify()
 */
function search_thai_search_preprocess($str) {

  if (variable_get('overlap_th', TRUE)) {

    // Add space after back word boundary
    $str = preg_replace('/[' . PREG_CLASS_TH_WORD_BACK_BOUNDARY . ']+/u', '$0 ', $str);

    // Add space before front vowel
    $str = preg_replace('/[' . PREG_CLASS_TH_VOWEL_FRONT . ']+/u', ' $0', $str);

    // Remove unnecessary characters for indexing
    $str = preg_replace('/[' . PREG_CLASS_TH_OMIT . ']+/u', '', $str);

    // Tokenization
    $str = preg_replace_callback('/[' . PREG_CLASS_TH . ']+/u', 'search_expand_th', $str);

  }

  return $str;
}

function search_expand_th($matches) {

  $min = variable_get('minimum_word_size', 3);
  $str = $matches[0];
  $length = mb_strlen($str);

  // If the text is shorter than the minimum word size, don't tokenize it.
  if ($length <= $min) {
    return ' ' . $str . ' ';
  }

  $tokens = ' ';

  // Build a FIFO queue of characters.
  $chars = array();

  for ($i = 0; $i < $length; $i++) {
    // Add the next character off the beginning of the string to the queue.
    $current = drupal_substr($str, 0, 1);
    $str = substr($str, strlen($current));
    $chars[] = $current;

    // Filter out PREG_CLASS_TH_NOT_FIRST
    if ($i >= $min - 1) {
      // Make a token of $min characters, and add it to the token string.
      $tokens .= implode('', $chars) . ' ';
      // Shift out the first character in the queue.
      array_shift($chars);
    }
  }
  return $tokens;

}
